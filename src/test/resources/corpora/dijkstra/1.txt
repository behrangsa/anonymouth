Dear Editor,

For a number of years I have been familiar with the observation that the quality of programmers is a decreasing function of the density of go to statements in the programs they produce. More recently I discovered why the use of the go to statement has such disastrous effects, and I became convinced that the go to statement should be abolished from all "higher level" programming languages (i.e., everything except, perhaps, plain machine code).

At that time I did not attach too much importance to this discovery; I now submit my considerations for publication because in very recent discussions in which the subject turned up, I have been urged to do so.

My first remark is that, although the programmer's activity ends when he has constructed a correct program, the process taking place afterwards is merely the execution of the program. What is the programmer doing? He is constructing a proof of the statement "This program will perform the required function." For our purpose it is sufficient to regard the required function as characterized by a set of postconditions the program execution has to satisfy. The program is correct if its execution in the initial state will bring about one of the desired final states.

The programmer's problem is to present such a convincing argument of correctness that the program can be entrusted to a machine. The reason that the go to statement is so harmful is that it makes such a convincing argument much harder to give.

When we look at a program text, we should be able to read it like a mathematical proof. We should be able to reason about it. For this, the program text should be structured in such a way that we can convince ourselves of the correctness of the program by means of a finite number of case distinctions, each of which is sufficiently simple that we can verify it by inspection.

The unbridled use of the go to statement has an immediate consequence that it becomes terribly hard to find a meaningful set of coordinates in which to describe the process progress. The go to statement as it stands is just too primitive; it is too much an invitation to make a mess of one's program.

One can regard and appreciate the clauses considered here as bridling its use. I do not claim that the clauses are exhaustive in the sense that they will satisfy all needs, but whatever clauses are suggested (e.g., abortion clauses) they should satisfy the requirement that a programmer independent coordinate system can be maintained to describe the process in a helpful and manageable way.

It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.

The remark about the undesirability of the go to statement is far from new. I remember having read the explicit recommendation to restrict the use of the go to statement in Peter Naur's contribution to the ALGOL 60 report. The formal treatment of the clauses mentioned in the previous paragraph is the subject of a paper by C. Bohm and G. Jacopini, which will appear in the Communications of the ACM. I have not mentioned this paper in my brief discussion, as I think that the subject is of such general interest that it is worthwhile to present it once more, be it more concisely.

Yours truly,
Edsger W. Dijkstra
